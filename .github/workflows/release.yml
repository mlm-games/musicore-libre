name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version_override:
        description: "Override version (optional, e.g., 1.2.3). When set, a tag v<version> will be created."
        required: false
        type: string
      prerelease:
        description: "Mark as prerelease"
        required: false
        default: false
        type: boolean
      auto_bump_if_tag_exists:
        description: "If the requested tag exists, bump MINOR until a free tag is found"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      release_notes: ${{ steps.notes.outputs.release-notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Resolve version and tag
        id: version
        shell: bash
        run: |
          set -Eeuo pipefail

          if [ -n "${{ inputs.version_override }}" ]; then
            VERSION_RAW="${{ inputs.version_override }}"
            TAG_NAME="v${VERSION_RAW}"
          else
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            VERSION_RAW="${TAG_NAME#v}"
          fi

          # Keep only core semver part for pubspec (strip any '+build')
          VERSION="${VERSION_RAW%%+*}"

          # Optionally auto-bump MINOR if the tag exists (workflow_dispatch only)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.version_override }}" ] && [ "${{ inputs.auto_bump_if_tag_exists }}" = "true" ]; then
            # bump MINOR until a free 'vX.Y.Z' is found; reset PATCH to 0 on bump
            while git rev-parse "v${VERSION}" >/dev/null 2>&1; do
              IFS='.' read -r MA MI PA <<< "${VERSION}"
              MI=$((MI+1))
              PA=0
              VERSION="${MA}.${MI}.${PA}"
            done
            TAG_NAME="v${VERSION}"
            echo "::notice::Auto-bumped to ${TAG_NAME} because the requested tag already existed."
          fi

          # Compare with pubspec.yaml (ignore build metadata after '+')
          PUBSPEC_VERSION="$(grep -E '^version:' pubspec.yaml | sed 's/version:[[:space:]]*//; s/+.*//')"
          if [ -n "${PUBSPEC_VERSION:-}" ] && [ "$VERSION" != "$PUBSPEC_VERSION" ]; then
            echo "::notice::pubspec.yaml has $PUBSPEC_VERSION; will sync to $VERSION."
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: Sync pubspec.yaml to version (workflow_dispatch only)
        if: github.event_name == 'workflow_dispatch' && inputs.version_override != ''
        shell: bash
        run: |
          set -Eeuo pipefail
          NEW_VERSION="${{ steps.version.outputs.version }}+${GITHUB_RUN_NUMBER}"
          if grep -qE '^version:' pubspec.yaml; then
            sed -i -E "s/^version:.*/version: ${NEW_VERSION}/" pubspec.yaml
          else
            printf "\nversion: %s\n" "${NEW_VERSION}" >> pubspec.yaml
          fi
          echo "Updated pubspec.yaml to version: ${NEW_VERSION}"

      - name: Commit version bump (workflow_dispatch only)
        if: github.event_name == 'workflow_dispatch' && inputs.version_override != ''
        shell: bash
        run: |
          set -Eeuo pipefail
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          if ! git diff --quiet -- pubspec.yaml; then
            git add pubspec.yaml
            git commit -m "chore: set pubspec version to ${{ steps.version.outputs.version }} (build ${GITHUB_RUN_NUMBER})"
            git push
          else
            echo "No version change needed."
          fi

      - name: Create tag if needed (workflow_dispatch only)
        if: github.event_name == 'workflow_dispatch' && inputs.version_override != ''
        shell: bash
        run: |
          set -Eeuo pipefail
          TAG="${{ steps.version.outputs.tag_name }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Generate Release Notes
        id: notes
        uses: mlm-games/release-notes-generator@v1
        with:
          version: ${{ steps.version.outputs.version }}
          changelog-path: 'CHANGELOG.md'
          auto-commit: 'true'
          exclude-patterns: 'chore:,ci:,docs:,Update release notes,Merge pull request'

  build:
    needs: prepare-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            target: android
            build_cmd: "flutter build apk --release"
            artifact_path: "build/app/outputs/flutter-apk/app-release.apk"
            artifact_name: "android-apk"
            asset_extension: "apk"
            asset_content_type: "application/vnd.android.package-archive"
          # Uncomment to enable more targets later
          # - platform: ubuntu-latest
          #   target: linux
          #   build_cmd: "flutter build linux --release"
          #   artifact_path: "build/linux/x64/release/bundle"
          #   artifact_name: "linux-x64"
          #   asset_extension: "tar.gz"
          #   asset_content_type: "application/gzip"
          # - platform: macos-latest
          #   target: macos
          #   build_cmd: "flutter build macos --release"
          #   artifact_path: "build/macos/Build/Products/Release"
          #   artifact_name: "macos-universal"
          #   asset_extension: "dmg"
          #   asset_content_type: "application/x-apple-diskimage"
          # - platform: windows-latest
          #   target: windows
          #   build_cmd: "flutter build windows --release"
          #   artifact_path: "build/windows/x64/runner/Release"
          #   artifact_name: "windows-x64"
          #   asset_extension: "zip"
          #   asset_content_type: "application/zip"
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout code at tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.prepare-release.outputs.tag_name }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Set up Java 17 (Android)
        if: matrix.target == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'

      - name: Install Linux dependencies
        if: matrix.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Sync pubspec.yaml to tag version (build-only for tag pushes)
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          set -Eeuo pipefail
          CURRENT="$(grep -E '^version:' pubspec.yaml | sed 's/version:[[:space:]]*//')"
          CORE_CURRENT="${CURRENT%%+*}"
          TARGET="${{ needs.prepare-release.outputs.version }}"
          if [ "${CORE_CURRENT}" != "${TARGET}" ]; then
            NEW_VERSION="${TARGET}+${GITHUB_RUN_NUMBER}"
            echo "Patching pubspec.yaml for build: ${CURRENT:-<none>} -> ${NEW_VERSION}"
            if grep -qE '^version:' pubspec.yaml; then
              sed -i -E "s/^version:.*/version: ${NEW_VERSION}/" pubspec.yaml
            else
              printf "\nversion: %s\n" "${NEW_VERSION}" >> pubspec.yaml
            fi
          else
            # Ensure a build number exists; if not, attach run number
            if [[ "${CURRENT}" != *"+"* ]]; then
              NEW_VERSION="${CORE_CURRENT}+${GITHUB_RUN_NUMBER}"
              echo "Adding build number to pubspec.yaml for build: ${CURRENT} -> ${NEW_VERSION}"
              sed -i -E "s/^version:.*/version: ${NEW_VERSION}/" pubspec.yaml
            fi
          fi

      - name: Get dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test
        continue-on-error: true

      - name: Build ${{ matrix.target }}
        run: ${{ matrix.build_cmd }}

      - name: Package build artifacts
        id: package
        shell: bash
        run: |
          set -Eeuo pipefail
          # App name from pubspec (fallback to Musicore)
          APP_NAME="$(grep -E '^name:' pubspec.yaml | awk '{print $2}' | tr -d '\r' || true)"
          APP_NAME="${APP_NAME:-Musicore}"
          VERSION="${{ needs.prepare-release.outputs.version }}"

          case "${{ matrix.target }}" in
            android)
              PACKAGE_NAME="${APP_NAME}-${VERSION}-android.apk"
              cp "${{ matrix.artifact_path }}" "$PACKAGE_NAME"
              ;;
            linux)
              PACKAGE_NAME="${APP_NAME}-${VERSION}-linux-x64.tar.gz"
              cd build/linux/x64/release
              tar czf "../../../../$PACKAGE_NAME" bundle/
              cd - >/dev/null
              ;;
            macos)
              PACKAGE_NAME="${APP_NAME}-${VERSION}-macos.zip"
              cd "${{ matrix.artifact_path }}"
              zip -r "../../../../../$PACKAGE_NAME" *.app
              cd - >/dev/null
              ;;
            windows)
              PACKAGE_NAME="${APP_NAME}-${VERSION}-windows-x64.zip"
              cd build/windows/x64/runner
              7z a -tzip "../../../../$PACKAGE_NAME" Release/
              cd - >/dev/null
              ;;
          esac

          echo "package_name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "package_path=$(pwd)/$PACKAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Generate SHA256 checksum
        shell: bash
        run: |
          set -Eeuo pipefail
          sha256sum "${{ steps.package.outputs.package_name }}" > "${{ steps.package.outputs.package_name }}.sha256"
          echo "Checksum:"
          cat "${{ steps.package.outputs.package_name }}.sha256"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          if-no-files-found: error
          retention-days: 14
          path: |
            ${{ steps.package.outputs.package_name }}
            ${{ steps.package.outputs.package_name }}.sha256

  create-release:
    needs: [prepare-release, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.prepare-release.outputs.tag_name }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Assemble release notes (with downloads)
        id: assemble
        shell: bash
        run: |
          set -Eeuo pipefail
          NOTES="${{ needs.prepare-release.outputs.release_notes }}"
          if [ -z "$NOTES" ]; then
            NOTES="See the changelog for details."
          fi

          {
            echo "## What's Changed"
            echo ""
            echo "$NOTES"
            echo ""
            echo "## Downloads"
            echo ""
            echo "| Platform | File | SHA256 |"
            echo "|----------|------|--------|"
          } > release_notes.md

          TAG="${{ needs.prepare-release.outputs.tag_name }}"
          while IFS= read -r -d '' checksum; do
            FILE="${checksum%.sha256}"
            NAME="$(basename "$FILE")"
            PLATFORM="$(echo "$NAME" | grep -oE '(android|linux|macos|windows)' || echo '-')"
            SUM="$(cut -d' ' -f1 "$checksum")"
            echo "| $PLATFORM | [$NAME](https://github.com/${{ github.repository }}/releases/download/${TAG}/${NAME}) | \`$SUM\` |" >> release_notes.md
          done < <(find artifacts -type f -name "*.sha256" -print0 | sort -z)

          echo "body_path=release_notes.md" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag_name }}
          name: "Musicore ${{ needs.prepare-release.outputs.version }}"
          body_path: ${{ steps.assemble.outputs.body_path }}
          prerelease: ${{ inputs.prerelease || false }}
          files: artifacts/**/*
          fail_on_unmatched_files: false
