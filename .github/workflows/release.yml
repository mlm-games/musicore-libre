name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version_override:
        description: "Override version (optional, e.g., 1.2.3). When set, a tag v<version> will be created."
        required: false
        type: string
      prerelease:
        description: "Mark as prerelease"
        required: false
        default: false
        type: boolean
      auto_bump_if_tag_exists:
        description: "If the requested tag exists, bump MINOR until a free tag is found"
        required: false
        default: false
        type: boolean
      upload_releases:
        description: "Publish to Google Play and create a GitHub Release"
        required: true
        default: true
        type: boolean
      play_track:
        description: "Google Play track"
        required: true
        default: alpha
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare-release:
    # Skip the duplicate run that happens when workflow_dispatch creates a tag
    if: ${{ !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && github.actor == 'github-actions[bot]') }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      release_notes: ${{ steps.notes.outputs.release-notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Resolve version and tag
        id: version
        shell: bash
        run: |
          set -Eeuo pipefail

          if [ -n "${{ inputs.version_override }}" ]; then
            VERSION_RAW="${{ inputs.version_override }}"
            TAG_NAME="v${VERSION_RAW}"
          else
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            VERSION_RAW="${TAG_NAME#v}"
          fi

          # Core semver for pubspec (strip any '+build')
          VERSION="${VERSION_RAW%%+*}"

          # Optional auto-bump MINOR until a free tag is found (manual runs only)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.version_override }}" ] && [ "${{ inputs.auto_bump_if_tag_exists }}" = "true" ]; then
            while git rev-parse "v${VERSION}" >/dev/null 2>&1; do
              IFS='.' read -r MA MI PA <<< "${VERSION}"
              MI=$((MI+1)); PA=0
              VERSION="${MA}.${MI}.${PA}"
            done
            TAG_NAME="v${VERSION}"
            echo "::notice::Auto-bumped to ${TAG_NAME} because the requested tag already existed."
          fi

          # Compare with pubspec.yaml (ignore build metadata)
          PUBSPEC_VERSION="$(grep -E '^version:' pubspec.yaml | sed 's/version:[[:space:]]*//; s/+.*//')"
          if [ -n "${PUBSPEC_VERSION:-}" ] && [ "$VERSION" != "$PUBSPEC_VERSION" ]; then
            echo "::notice::pubspec.yaml has $PUBSPEC_VERSION; will sync to $VERSION."
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: Sync pubspec.yaml to version (workflow_dispatch only)
        if: github.event_name == 'workflow_dispatch' && inputs.version_override != ''
        shell: bash
        run: |
          set -Eeuo pipefail
          NEW_VERSION="${{ steps.version.outputs.version }}+${GITHUB_RUN_NUMBER}"
          if grep -qE '^version:' pubspec.yaml; then
            sed -i -E "s/^version:.*/version: ${NEW_VERSION}/" pubspec.yaml
          else
            printf "\nversion: %s\n" "${NEW_VERSION}" >> pubspec.yaml
          fi
          echo "Updated pubspec.yaml to version: ${NEW_VERSION}"

      - name: Commit version bump (workflow_dispatch only)
        if: github.event_name == 'workflow_dispatch' && inputs.version_override != ''
        shell: bash
        run: |
          set -Eeuo pipefail
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          if ! git diff --quiet -- pubspec.yaml; then
            git add pubspec.yaml
            git commit -m "chore: set pubspec version to ${{ steps.version.outputs.version }} (build ${GITHUB_RUN_NUMBER})"
            git push
          else
            echo "No version change needed."
          fi

      - name: Create tag if needed (workflow_dispatch only)
        if: github.event_name == 'workflow_dispatch' && inputs.version_override != ''
        shell: bash
        run: |
          set -Eeuo pipefail
          TAG="${{ steps.version.outputs.tag_name }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Generate Release Notes
        id: notes
        uses: mlm-games/release-notes-generator@v1
        with:
          version: ${{ steps.version.outputs.version }}
          changelog-path: 'CHANGELOG.md'
          auto-commit: ${{ github.event_name != 'push' }} # do not commit on tag runs
          exclude-patterns: 'chore:,ci:,docs:,Update release notes,Merge pull request'

  build-android:
    needs: prepare-release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag_name }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.x'
          channel: 'stable'
          cache: true

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Decode and Decrypt Keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" > release.keystore.asc
          
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSPHRASE }}" \
              --batch release.keystore.asc > release.keystore
          
          echo "KEYSTORE_PATH=${{ github.workspace }}/release.keystore" >> $GITHUB_ENV

      - name: Ensure pubspec version has build number for CI
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          set -Eeuo pipefail
          CURRENT="$(grep -E '^version:' pubspec.yaml | sed 's/version:[[:space:]]*//')"
          CORE_CURRENT="${CURRENT%%+*}"
          TARGET="${{ needs.prepare-release.outputs.version }}"
          if [ "${CORE_CURRENT}" != "${TARGET}" ]; then
            NEW_VERSION="${TARGET}+${GITHUB_RUN_NUMBER}"
            echo "Patching pubspec.yaml: ${CURRENT:-<none>} -> ${NEW_VERSION}"
            sed -i -E "s/^version:.*/version: ${NEW_VERSION}/" pubspec.yaml
          elif [[ "${CURRENT}" != *"+"* ]]; then
            NEW_VERSION="${CORE_CURRENT}+${GITHUB_RUN_NUMBER}"
            echo "Adding build number: ${CURRENT} -> ${NEW_VERSION}"
            sed -i -E "s/^version:.*/version: ${NEW_VERSION}/" pubspec.yaml
          fi

      - name: Get dependencies
        run: |
          set -e
          flutter pub get --enforce-lockfile || flutter pub get

      - name: Run tests (non-blocking)
        run: flutter test
        continue-on-error: true

      - name: Build AAB
        env:
          KEYSTORE_PATH: ${{ env.KEYSTORE_PATH }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: flutter build appbundle --release

      - name: Build APKs
        env:
          KEYSTORE_PATH: ${{ env.KEYSTORE_PATH }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          flutter build apk --release
          flutter build apk --release --split-per-abi

      - name: Package artifacts
        id: package
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p artifacts

          APP_NAME="$(grep -E '^name:' pubspec.yaml | awk '{print $2}' | tr -d '\r' || true)"
          APP_NAME="${APP_NAME:-Musicore}"
          VERSION="${{ needs.prepare-release.outputs.version }}"

          # AAB
          AAB_SRC="build/app/outputs/bundle/release/app-release.aab"
          AAB_OUT="${APP_NAME}-${VERSION}-android.aab"
          cp "$AAB_SRC" "artifacts/$AAB_OUT"

          # Universal APK
          APK_UNI_SRC="build/app/outputs/flutter-apk/app-release.apk"
          APK_UNI_OUT="${APP_NAME}-${VERSION}-android-universal.apk"
          cp "$APK_UNI_SRC" "artifacts/$APK_UNI_OUT"

          # Split APKs
          for apk in build/app/outputs/flutter-apk/*-release.apk; do
            base="$(basename "$apk")"
            # extract arch token (arm64-v8a, armeabi-v7a, x86_64, x86)
            arch="$(echo "$base" | grep -oE '(arm64-v8a|armeabi-v7a|x86_64|x86)' || true)"
            [ -n "$arch" ] && cp "$apk" "artifacts/${APP_NAME}-${VERSION}-android-${arch}.apk"
          done

          # Emit outputs for later steps
          echo "aab_path=$(pwd)/artifacts/$AAB_OUT" >> "$GITHUB_OUTPUT"
          echo "artifact_dir=$(pwd)/artifacts" >> "$GITHUB_OUTPUT"

      - name: Generate SHA256 checksums and sizes
        shell: bash
        run: |
          set -Eeuo pipefail
          cd artifacts
          for f in *; do
            [ -f "$f" ] || continue
            sha256sum "$f" > "$f.sha256"
            stat --printf="%n %s bytes\n" "$f"
          done
          cd -

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ needs.prepare-release.outputs.version }}
          if-no-files-found: error
          retention-days: 14
          path: |
            artifacts/*

      - name: Upload to Google Play (optional)
        if: github.event_name == 'workflow_dispatch' && inputs.upload_releases == true && inputs.play_track != '' && secrets.PLAY_SERVICE_ACCOUNT_JSON != ''
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: io.github.mlm_games.musicore
          releaseFiles: ${{ steps.package.outputs.aab_path }}
          track: ${{ inputs.play_track }}
          status: completed
          whatsNewDirectory: fastlane/metadata/android

  create-release:
    needs: [prepare-release, build-android]
    if: ${{ (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.upload_releases == true)) && !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && github.actor == 'github-actions[bot]') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.prepare-release.outputs.tag_name }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Assemble release notes (with downloads)
        id: assemble
        shell: bash
        run: |
          set -Eeuo pipefail
          NOTES="${{ needs.prepare-release.outputs.release_notes }}"
          if [ -z "$NOTES" ]; then
            NOTES="See the changelog for details."
          fi

          {
            echo "## What's Changed"
            echo ""
            echo "$NOTES"
            echo ""
            echo "## Downloads"
            echo ""
            echo "| File | Size | SHA256 |"
            echo "|------|------|--------|"
          } > release_notes.md

          TAG="${{ needs.prepare-release.outputs.tag_name }}"
          while IFS= read -r -d '' file; do
            NAME="$(basename "$file")"
            SIZE="$(stat --printf="%s" "$file" 2>/dev/null || stat -f%z "$file")"
            SUM="$(cut -d' ' -f1 "$file.sha256" 2>/dev/null || echo '-')"
            echo "| [$NAME](https://github.com/${{ github.repository }}/releases/download/${TAG}/${NAME}) | ${SIZE} | \`$SUM\` |" >> release_notes.md
          done < <(find artifacts -type f -not -name "*.sha256" -print0 | sort -z)

          echo "body_path=release_notes.md" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag_name }}
          name: "Musicore ${{ needs.prepare-release.outputs.version }}"
          body_path: ${{ steps.assemble.outputs.body_path }}
          prerelease: ${{ github.event_name == 'workflow_dispatch' && (inputs.prerelease || false) }}
          files: artifacts/**/*
          fail_on_unmatched_files: false
